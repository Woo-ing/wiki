network {
  # Official seed node info.
  # You can also use other node as your seed node.
  seed: ["/ip4/[seed ip]/tcp/[seed port]/ipfs/[seed token]"]

  # Local node socket.
  listen: ["0.0.0.0:8680"]

  # [Optional] Node private key, used for authority between nodes.
  # If the private key is empty, a random private key will be generated.
  private_key: "conf/network.key"
}

chain {
  # Chain identity. 
  # Nodes with different chain_id cannot communicate with each other.
  chain_id: 101

  # Data folder path.
  datadir: "data.db"

  # Keydir path where you can put in your keystore json file of wallets.
  keydir: "keydir"

  # Here is your genesis conf.
  genesis: "conf/genesis.conf"

  # Signature algorithm for signing blocks & txs.
  signature_ciphers: ["ECC_SECP256K1"]

  # Enable mining service in consensus. 
  start_mine: false

  # If start_mine == true, the address of miner should be provided.
  miner: "[your miner address]"

  # If start_mine == true, the coinbase should be provided. 
  # If you minted a block, the reward will be sent to the coinbase.
  coinbase: "[your coinbase address]"

  # If start_mine == true, you can choose to enable a remote sign server.
  # If you enable a remote sign server, node will request the remote server to sign new minted block.
  enable_remote_sign_server: false

  # If start_miner == true && enable_remote_sign_server == false, miner's passphrase should be provided.
  # Miner's passphrase will be used to sign new minted block locally.
  passphrase: "[your miner's passphrase]"

  # If start_miner == true && enable_remote_sign_server == true, the remote sign server should be privided.
  # Node will request the remote sign server to sign new minted block.
  remote_sign_server: "ip:port"

  # If start_mine == true, gas price should be provided.
  # Gas price means the lowest gas price of transactions that can be accepted by local node.
  # Scope: (0, 10^12], default 10^6
  gas_price: "1000000"

  # If start_mine == true, gas limit should be provided.
  # Gas limit means the biggest gas limit of transactions that can be accepted by local node.
  # Scope: (0, 5*10^10], default 5*10^10
  gas_limit: "50000000000" 
}

rpc {
    # Rpc service socket
    rpc_listen: ["0.0.0.0:8684"]

    # Http service socket
    http_listen: ["0.0.0.0:8685"]

    # Modules opened
    # Api: https://github.com/nebulasio/wiki/blob/master/rpc.md
    # Admin: https://github.com/nebulasio/wiki/blob/master/rpc_admin.md
    # Attention: Admin includes a lot of dangerous api, please be careful to open it.
    http_module: ["api","admin"]

    # Rpc concurrent requests limit. default is 128.
    connection_limits: 128

    # Http concurrent requests limit. default is 128.
    http_limits: 128

    # Http CORS whitelist. default is empty.
    http_cors: ["*"]
}

app {
    # Log level, support debug/info/warning/error/fatal
    log_level: "info"

    # Log folder path
    log_file: "logs"

    # Enable crash report uploaded
    enable_crash_report: false

    # If enable_crash_report == true, crash_report_url should be provides.
    # Crash report will be uploaded to the url.
    crash_report_url: "https://crashreport.nebulas.io"
}

stats {

    # Enable metrics statics
    enable_metrics: false

    # If enable_metrics == true, infludb should be provided.
    # All metrics information will be written into the influxdb.
    influxdb: {
        host: "[your influxdb host]"
        db: "[your influxdb database]"
        user: "[your influxdb user]"
        password: "[your influxdb password]"
    }
}